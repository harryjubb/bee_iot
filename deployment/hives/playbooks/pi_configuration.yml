---
- name: Pi configuration
  hosts: hives
  remote_user: pi

  tasks:
  - name: Test connection
    ansible.builtin.ping:

  # Set the `pi` user password
  # Creates password salts that are idempotent between runs
  # https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html#encrypting-and-checksumming-strings-and-passwords
  - name: Set pi user password
    become: true
    ansible.builtin.user:
      name: pi
      password: "{{ pi_password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
      update_password: always

  # Prevent remote.it connectd from being upgraded
  # https://support.remote.it/hc/en-us/articles/360051668711
  - name: Prevent connectd from being upgraded
    become: true
    dpkg_selections:
      name: connectd
      selection: hold

  # Apt update / upgrade
  - name: Package updates
    become: true
    ansible.builtin.apt:
      update_cache: true
      upgrade: safe

  # Ensure required packages are installed
  - name: Package installs
    become: true
    ansible.builtin.apt:
      name:
        - curl
        - libffi-dev
        - python
        - python-pip
        - python3
        - python3-pip
      state: present

  # Hostname
  - name: Get hostname
    changed_when: false
    become: true
    ansible.builtin.command: raspi-config nonint get_hostname
    register: existing_hostname
  - name: Set hostname
    when: existing_hostname.stdout != pi_hostname
    become: true
    ansible.builtin.command: raspi-config nonint do_hostname {{ pi_hostname | quote }}

  # WiFi country
  - name: Get WiFi country
    changed_when: false
    become: true
    ansible.builtin.command: raspi-config nonint get_wifi_country
    register: existing_wifi_country
  - name: Set WiFi country
    when: existing_wifi_country.stdout != wpa_wifi_country
    become: true
    ansible.builtin.command: raspi-config nonint do_wifi_country {{ wpa_wifi_country | quote }}

  # Set up the WPA supplicant file for WiFi connections
  # Due to some weirdness with updating the wpa_supplicant.conf
  # directly in /etc/wpa_supplicant being non-idempotent,
  # the config is sorted in the pi user's directory,
  # and then copied back to /etc/wpa_supplicant
  - name: Copy wpa_supplicant.conf to Pi user's home
    become: true
    ansible.builtin.copy:
      remote_src: true
      src: /etc/wpa_supplicant/wpa_supplicant.conf
      dest: /home/pi/wpa_supplicant.conf
      mode: 0644
      owner: pi
      group: pi

  - name: Set up the WPA supplicant file for WiFi connections
    with_items: "{{ group_wifi_networks + hive_wifi_networks }}"
    ansible.builtin.blockinfile:
      path: /home/pi/wpa_supplicant.conf
      block: |
        network={
                ssid="{{ item.ssid }}"
                psk="{{ item.psk }}"
                id_str="{{ item.id_str }}"
        }
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.id_str }}"

  - name: Copy wpa_supplicant.conf back to /etc/wpa_supplicant
    become: true
    ansible.builtin.copy:
      remote_src: true
      src: /home/pi/wpa_supplicant.conf
      dest: /etc/wpa_supplicant/wpa_supplicant.conf
      mode: 0644
      owner: root
      group: root
    notify: Reboot

  # Camera setup
  - name: Get camera enabled / disabled status
    changed_when: false
    become: true
    ansible.builtin.command: raspi-config nonint get_camera
    register: camera_enabled_status
  - name: Enable the camera via raspi-config
    when: camera_enabled_status.stdout == "1"
    become: true
    ansible.builtin.command: raspi-config nonint do_camera 0
    notify:
      - Reboot

  # I2C setup
  - name: Get I2C enabled / disabled status
    changed_when: false
    become: true
    command: raspi-config nonint get_i2c
    register: i2c_enabled_status
  - name: Enable I2C via raspi-config
    when: i2c_enabled_status.stdout == "1"
    become: true
    ansible.builtin.command: raspi-config nonint do_i2c 0
    notify:
      - Reboot

  handlers:
    - name: Reboot
      become: true
      ansible.builtin.reboot:
        connect_timeout: 600
