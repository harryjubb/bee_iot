---
- name: remote.it setup
  hosts: hives
  remote_user: pi

  tasks:

  # Set up the remoteit credentials file
  - name: Make sure remoteit config dir exists
    ansible.builtin.file:
      path: /home/pi/.remoteit
      state: directory
      mode: 0700

  - name: Copy over the remoteit credentials file
    when: remoteit_enabled
    ansible.builtin.template:
      src: remoteit_credentials.j2
      dest: /home/pi/.remoteit/credentials
      mode: 0600
    register: remoteit_credentials

  # Download the remoteit CLI
  - name: Get the remoteit CLI
    become: true
    register: remoteit_cli_download
    ansible.builtin.get_url:
      url: https://downloads.remote.it/cli/v1.8.8/remoteit.arm-v6-linux
      dest: /usr/local/bin/remoteit
      mode: 0755

  # Install the remoteit agent
  - name: Install the remoteit agent
    become: true
    when: remoteit_cli_download.changed
    ansible.builtin.command: remoteit agent install

  # Configure remoteit
  - name: Configure remoteit
    ansible.builtin.command: remoteit configure --profile default --enabled

  # Get remoteit status
  - name: Remoteit status
    become: true
    ansible.builtin.command: remoteit status --json
    register: remoteit_status

  # Register this device
  - name: Remoteit registration
    ansible.builtin.command: remoteit register --name {{ pi_hostname }}-{{ ansible_default_ipv4.macaddress }}-{{ ansible_date_time.iso8601 }}
    when: remoteit_status.stdout | community.general.json_query('data.device.id') == ""

  # log
  - name: Log services
    ansible.builtin.debug:
      var: remoteit_status.stdout | community.general.json_query('data.services[*]')

#  # Add the SSH service
#  - name: Add the SSH service
#    ansible.builtin.command: remoteit add --name "SSH" --port 22 --type 28
#    when: remoteit_status.stdout | Community.general.json_query('data.services')
